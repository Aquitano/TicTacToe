// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// TicTacToe Game Data
model Game {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    gameEnd   DateTime?

    winner  String?
    turn    String?
    players User[]
    moves   Move[]
}

model AiGame {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    gameEnd   DateTime?

    winner String?
    player User    @relation(fields: [userId], references: [id])
    userId String
    moves  Move[]
}

model Move {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    position Int
    gameId   String?
    game     Game?   @relation(fields: [gameId], references: [id])
    aiGameId String?
    AiGame   AiGame? @relation(fields: [aiGameId], references: [id])

    playerId   String?
    player     User?   @relation(fields: [playerId], references: [id])
    playerType String? @default("human")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    refresh_token_expires_in Int?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    Game   Game[]
    AiGame AiGame[]

    Move Move[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
