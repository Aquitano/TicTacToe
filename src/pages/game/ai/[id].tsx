/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import MoveHistory from '@/components/moveHistory';
import { Separator } from '@/components/separator';
import { Skeleton } from '@/components/skeleton';
import { useToast } from '@/components/use-toast';
import { api } from '@/utils/api';
import { type GetStaticProps, type NextPage } from 'next';
import { useSession } from 'next-auth/react';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { memo, useCallback, useEffect, useRef, useState } from 'react';

const BOARD_SIZE = 9;
const MAX_POSITION = 8;

const GamePage: NextPage<{ gameId: string }> = ({ gameId: gameId }) => {
  const router = useRouter();
  const { toast } = useToast();
  const [board, setBoard] = useState<string[]>(Array(BOARD_SIZE).fill(''));
  const [myTurn, setMyTurn] = useState<boolean>(false);
  const [moveHistory, setMoveHistory] = useState<
    Array<{ player: string; position: number; time: Date }>
  >([]);
  const [winningText, setWinningText] = useState<string>('');
  const boardRef = useRef(board);
  const moveHistoryRef = useRef(moveHistory);
  const [aiStrength, setAiStrength] = useState<number>(0);

  useEffect(() => {
    setAiStrength(Number(router.query.strength));
  }, [router.query.strength]);

  const handleError = (error: { message: string }) => {
    toast({
      title: 'Uh oh! Something went wrong.',
      description: error.message,
      variant: 'destructive',
    });
  };

  const { data: sessionData } = useSession({
    required: true,
  });

  const { mutate: makeMove, error: moveError } = api.game.makeMove.useMutation({
    onError: handleError,
  });

  useEffect(() => {
    // Reset the board
    setBoard(Array(BOARD_SIZE).fill(''));
    setMoveHistory([]);
  }, [moveError]);

  const handleMove = useCallback(
    (position: number) => {
      if (sessionData?.user?.id === undefined)
        throw new Error('Session user id is undefined');

      if (!myTurn) return;
      if (board[position] !== '') return;

      makeMove({
        gameId,
        position,
      });

      setMyTurn(false);
      setBoard((prevBoard) => {
        const newBoard = [...prevBoard];

        newBoard[position] = 'X';

        return newBoard;
      });
    },
    [board, makeMove, myTurn, sessionData?.user?.id],
  );
  const handleGameEnd = useCallback(
    (winnerId: string, status: 'draw' | 'win') => {
      if (status === 'draw') {
        setWinningText("It's a draw!");
        toast({
          title: 'Game over!',
          description: `It's a draw!`,
        });
      } else {
        if (winnerId === sessionData?.user?.id) {
          setWinningText('You won!');
          toast({
            title: 'Game over!',
            description: `You won!`,
          });
        } else {
          setWinningText('You lost!');
          toast({
            title: 'Game over!',
            description: `You lost!`,
            variant: 'destructive',
          });
        }
      }

      setMyTurn(false);
    },
    [sessionData?.user?.id, toast],
  );

  boardRef.current = board;
  moveHistoryRef.current = moveHistory;
  return (
    <>
      <Head>
        <title>TicTacToe</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            <span className="text-[hsl(280,100%,70%)]">TicTacToe AI</span>
          </h1>
          <div className="flex flex-col items-center justify-center gap-3">
            <p className="text-lg font-bold tracking-tight text-white sm:text-xl">
              {gameId}, AI Strength: {aiStrength}
            </p>
            {winningText && (
              <p className="text-lg font-bold tracking-tight text-white sm:text-xl">
                {winningText}
              </p>
            )}
            <p className={`text-white ${!myTurn ? 'invisible' : ''}`}>
              Make Move
            </p>
            <div className="flex h-full max-w-xs flex-col content-center justify-center">
              <div className="self-center">
                <div className="max-w-xs text-3xl">
                  <GridSkeleton />
                </div>
                <MoveHistory
                  history={moveHistory}
                  setBoard={setBoard}
                  sessionData={sessionData}
                  BOARD_SIZE={BOARD_SIZE}
                />
              </div>
            </div>
            <Separator className="mt-16" />
            <Link
              href="/game"
              className="text-lg font-bold tracking-tight text-white sm:text-xl"
            >
              Go back to the lobby
            </Link>
          </div>
        </div>
      </main>
    </>
  );
};

// eslint-disable-next-line react/display-name
const GridSkeleton = memo(() => (
  <div className="grid grid-cols-3 gap-4">
    {Array(9)
      .fill('')
      .map((_, i) => (
        <Skeleton
          key={'board-skeleton' + String(i)}
          className="mb-4 h-20 w-20 rounded-xl opacity-70"
        />
      ))}
  </div>
));

export const getStaticProps: GetStaticProps = (context) => {
  const gameId = context.params?.id;

  if (typeof gameId !== 'string') return { notFound: true };

  return {
    props: {
      gameId,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: 'blocking' };
};

export default GamePage;
